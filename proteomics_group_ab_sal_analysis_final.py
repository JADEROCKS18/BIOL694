# -*- coding: utf-8 -*-
"""Proteomics_Group_AB_SAL_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EKmFra6W-HGKCP_Wjv6eHmxLhzH9sPBr
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""Import CSV Files"""

sal_df = pd.read_csv("/content/sample_data/USE_THIS_salmonella_protein_groups.csv")

sal_df.head()

ab_df = pd.read_csv("/content/sample_data/USE_THIS_a_b_protein_groups.csv")

ab_df.head()

ab_new_df = ab_df[["Protein IDs", "Fasta headers", "iBAQ"]]
sal_new_df = sal_df[["Protein IDs", "Fasta headers", "iBAQ"]]

ab_new_df

# Extracting the housekeeping protein iBAQ values

ab_hp = ab_new_df[ab_new_df['Protein IDs'].str.contains('A0A090BE51').fillna(False)]

sal_hp = sal_new_df[sal_new_df['Protein IDs'].str.contains('A0A1R2VN47').fillna(False)]

ab_hp

sal_hp

sal_hp_ibaq = sal_hp["iBAQ"]

ab_hp_ibaq = ab_hp["iBAQ"]

# Now I will calculate the total iBAQ values for all of our efflux pump proteins in our sample

match = ['efflux', 'pump', 'RND', 'SMR', 'MFS', 'MATE', 'ABC', 'macA', 'acrA', "emrA", "mdtA", 'macB', 'smvA', 'mdtK',
        'emrB', 'mdtB', 'acrB', 'acrD', 'acrF', 'tolC']
match_RND = ['mdtA', 'mdtB', 'mdsB', 'acrF', 'acrB', 'acrA','RND']
match_ABC = ['ABC', 'macA', 'macB']
match_MFS = ['emrA','emrB', 'MFS']
match_SMR = ['abeS', 'abeA', 'abeb', 'SMR']
match_MATE = ['MATE', 'mdtK']
def string_finder(row, words):
    if any(word in field for field in row for word in words):
        return True
    return False

ab_new_df["isContained"]= ab_new_df.astype(str).apply(string_finder, words=match, axis=1)
ab_new_df = ab_new_df.loc[ab_new_df['isContained']==True]
ab_new_df

sal_new_df["isContained"]= sal_new_df.astype(str).apply(string_finder, words=match, axis=1)
sal_new_df = sal_new_df.loc[sal_new_df['isContained']==True]
sal_new_df

"""iBAQ values for our housekeeping protein"""

sal_hp['iBAQ']

ab_hp['iBAQ']

"""Normalization by housekeeping protein iBAQ value. We are dividing all the protein iBAQ values by our housekeeping protein's iBAQ value. I tried using sal_hp, and ab_hp but I kept receiving an error so I had to hard code their values for division."""

sal_new_df["Normalized iBAQ"] = sal_new_df['iBAQ'].div(86505000)

sal_new_df

ab_new_df["Normalized iBAQ"] = ab_new_df['iBAQ'].div(898470)

ab_new_df

#creating a log transformed graph of our protein abundances for salmonella

sdf1 = np.array(sal_new_df['Normalized iBAQ'])
sdf2 = np.array(sal_new_df['Protein IDs'])
sdf1 = np.log(sdf1)

fig, ax = plt.subplots()
plt.bar(sdf2, sdf1)
plt.xticks(rotation = 90)
plt.show()

#creating a subgraph from the graph above. We were only interested in the proteins
#that are highly expressed within our sample.

newdf = pd.DataFrame(sdf1, sdf2)
newdf = newdf.reset_index()  # make sure indexes pair with number of rows
newdf.rename(columns = {'index':'ProteinIDs', 0:'Normalized_iBAQ_log'}, inplace = True)


top_expressed_sal = newdf.loc[newdf['Normalized_iBAQ_log'] > 0]

X = top_expressed_sal['ProteinIDs']
y = top_expressed_sal['Normalized_iBAQ_log']
plt.xticks(rotation = 90)
plt.title("Top Protein Abundances for Salmonella Enteritidis")
plt.xlabel("Protein IDs")
plt.ylabel("Normalized log iBAQ")

plt.bar(X, y)

top_expressed_sal

#creating a log transformed graph of our protein abundances for a.b.

adf1 = np.array(ab_new_df['Normalized iBAQ'])
adf2 = np.array(ab_new_df['Protein IDs'])
adf1 = np.log(adf1)

fig, ax = plt.subplots()
plt.bar(adf2, adf1)

plt.xticks(rotation = 90)
spacing = 0.01
fig.subplots_adjust(bottom=spacing)
plt.show()

#Creating a subgraph of the graph above. We were only interested in proteins that have
#high abundance
newdfab = pd.DataFrame(adf1, adf2)
newdfab = newdfab.reset_index()  # make sure indexes pair with number of rows
newdfab.rename(columns = {'index':'ProteinIDs', 0:'Normalized_iBAQ_log'}, inplace = True)

top_expressed_ab = newdfab.loc[newdfab['Normalized_iBAQ_log'] > 0]

X = top_expressed_ab['ProteinIDs']
y = top_expressed_ab['Normalized_iBAQ_log']
plt.xticks(rotation = 90)
plt.title("Top Protein Abundances for Acinetobacter Baumannii")
plt.xlabel("Protein IDs")
plt.ylabel("Normalized log iBAQ")

plt.bar(X, y)

top_expressed_ab

"""Finding specific efflux pump family proteins within our species to then compare different efflux pump families"""

#MFS FAMILY

sal_new_df["MFS Family"]= sal_new_df.astype(str).apply(string_finder, words=match_MFS, axis=1)
sal_new_df.loc[sal_new_df['MFS Family']==True]

ab_new_df["MFS Family"]= ab_new_df.astype(str).apply(string_finder, words=match_MFS, axis=1)
ab_new_df.loc[ab_new_df['MFS Family']==True]

#ABC FAMILY

ab_new_df["ABC Family"]= ab_new_df.astype(str).apply(string_finder, words=match_ABC, axis=1)
ab_new_df.loc[ab_new_df['ABC Family']==True]

sal_new_df["ABC Family"]= sal_new_df.astype(str).apply(string_finder, words=match_ABC, axis=1)
ab_new_df.loc[ab_new_df['ABC Family']==True]

#Comparing RND proteins from both species, A.B and S.E.

ab_new_df["RND Family"]= ab_new_df.astype(str).apply(string_finder, words=match_RND, axis=1)
ab_new_df.loc[ab_new_df['RND Family']==True]

sal_new_df["RND Family"]= sal_new_df.astype(str).apply(string_finder, words=match_RND, axis=1)
sal_new_df.loc[sal_new_df['RND Family']==True]

#Calculating total absolute abundances for each protein family 

mfs_sal_total = sal_new_df.loc[sal_new_df['MFS Family']==True]
mfs_sal_total = mfs_sal_total['Normalized iBAQ'].sum()
mfs_ab_total = ab_new_df.loc[ab_new_df['MFS Family']==True]
mfs_ab_total = mfs_ab_total['Normalized iBAQ'].sum()

abc_ab_total = ab_new_df.loc[ab_new_df['ABC Family']==True]
abc_ab_total = abc_ab_total['Normalized iBAQ'].sum()
abc_sal_total = sal_new_df.loc[sal_new_df['ABC Family']==True]
abc_sal_total = abc_sal_total['Normalized iBAQ'].sum()

rnd_ab_total = ab_new_df.loc[ab_new_df['RND Family']==True]
rnd_ab_total = rnd_ab_total['Normalized iBAQ'].sum()
rnd_sal_total = sal_new_df.loc[sal_new_df['RND Family']==True]
rnd_sal_total = rnd_sal_total['Normalized iBAQ'].sum()

#Comparing different efflux pump familes between both species

species = ("Salmonella Enteritis ", "Acinetobacter baumannii")
pump_families= {
    'RND Family': (np.log(rnd_sal_total), np.log(rnd_ab_total)),
    'ABC Family': (np.log(abc_sal_total),np.log(abc_ab_total)),
    'MFS Family': (np.log(mfs_sal_total), np.log(mfs_ab_total))
    }

x = np.arange(len(species))  # the label locations
width = 0.25  # the width of the bars
multiplier = 0

fig, ax = plt.subplots(layout='constrained')

for attribute, measurement in pump_families.items():
    offset = width * multiplier
    rects = ax.bar(x + offset, measurement, width, label=attribute)
    ax.bar_label(rects, padding=3)
    multiplier += 1

ax.set_ylabel('Absolute Quantifications')
ax.set_title('S.E vs A.B')
ax.set_xticks(x + width, species)
ax.legend(loc='upper left')
ax.set_ylim(0, 10)

plt.show()

#Comparing RND family proteins between Salmonella and A.V.

sal_acrA = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('acrA').fillna(False)]

ab_mdtA = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('mdtA').fillna(False)]


X1 = ab_mdtA['Normalized iBAQ'].sum()
X2 = sal_acrA['Normalized iBAQ'].sum()


species = ("Salmonella Enteritis/acrA ", "Acinetobacter baumannii/mdtA")
pump_families= {
    'RND family proteins': (X2, X1)
    }

x = np.arange(len(species))  # the label locations
width = 0.25  # the width of the bars
multiplier = 0

fig, ax = plt.subplots(layout='constrained')

for attribute, measurement in pump_families.items():
    offset = width * multiplier
    rects = ax.bar(x + offset, measurement, width, label=attribute)
    ax.bar_label(rects, padding=3)
    multiplier += 1

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Normalized iBAQ')
ax.set_title('S.E vs A.B')
ax.set_xticks(x , species)
ax.legend(loc='upper right')
ax.set_ylim(0, 5)

plt.show()

#Comparing macA proteins abundances between both species

sal_macA = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('macA').fillna(False)]

ab_macA = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('macA').fillna(False)]


X1 = ab_macA['Normalized iBAQ'].sum()
X2 = sal_macA['Normalized iBAQ'].sum()


species = ("Salmonella Enteritis ", "Acinetobacter baumannii")
pump_families= {
    'macA proteins': (X2, X1)
    }

x = np.arange(len(species))  # the label locations
width = 0.25  # the width of the bars
multiplier = 0

fig, ax = plt.subplots(layout='constrained')

for attribute, measurement in pump_families.items():
    offset = width * multiplier
    rects = ax.bar(x + offset, measurement, width, label=attribute)
    ax.bar_label(rects, padding=3)
    multiplier += 1

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Normalized iBAQ')
ax.set_title('S.E vs A.B')
ax.set_xticks(x, species)
ax.legend(loc='upper right')
ax.set_ylim(0, 5)

plt.show()

#Comparing ALL family localization of efflux pump proteins

#periplasm s.e
s1 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('acrA').fillna(False)]
s2 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('emrA').fillna(False)]
s3 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('mdtA').fillna(False)]
s4 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('macA').fillna(False)]
s5 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('acrE').fillna(False)]

se_periplasm_total = (s1['Normalized iBAQ'].sum() +s2['Normalized iBAQ'].sum() +s3['Normalized iBAQ'].sum()+ s1['Normalized iBAQ'].sum() +
s4['Normalized iBAQ'].sum() +s5['Normalized iBAQ'].sum())


#periplasm a.b
a1 = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('mdtA').fillna(False)]
a2 = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('acrA').fillna(False)]
a3 = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('acrE').fillna(False)]
a4 = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('macA').fillna(False)]
a5 = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('emrA').fillna(False)]

ab_periplasm_total = (a1['Normalized iBAQ'].sum() + a2['Normalized iBAQ'].sum() + a3['Normalized iBAQ'].sum() + 
a4['Normalized iBAQ'].sum() + a5['Normalized iBAQ'].sum())

#outer membrane s.e
sal_tolC = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('tolC').fillna(False)]
se_outer_total = sal_tolC['Normalized iBAQ'].sum()
#outer membrance a.b
#n/a

#inner membrane s.e
is1 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('macB').fillna(False)]
is2 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('mdtK').fillna(False)]
is3 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('mdfA').fillna(False)]
is4 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('smvA').fillna(False)]
is5 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('acrB').fillna(False)]
is6 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('acrD').fillna(False)]
is7 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('acrF').fillna(False)]
is8 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('mdsB').fillna(False)]
is9 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('mdtB').fillna(False)]

se_inner_total = (is1['Normalized iBAQ'].sum() + is2['Normalized iBAQ'].sum() +is3['Normalized iBAQ'].sum() +
is4['Normalized iBAQ'].sum() +is5['Normalized iBAQ'].sum() +is6['Normalized iBAQ'].sum() +
is7['Normalized iBAQ'].sum() +is8['Normalized iBAQ'].sum() +is9['Normalized iBAQ'].sum() )

#inner membrane a.b
ia1 = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('macB').fillna(False)]
ia2 = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('mdtK').fillna(False)]
ia3 = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('smvA').fillna(False)]
ia4 = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('mdfA').fillna(False)]
ia5 = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('acrB').fillna(False)]
ia6 = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('acrD').fillna(False)]
ia7 = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('acrF').fillna(False)]
ia8 = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('mdsB').fillna(False)]
ia9 = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('mdtB').fillna(False)]

ab_inner_total = (ia1['Normalized iBAQ'].sum() + ia2['Normalized iBAQ'].sum() +ia3['Normalized iBAQ'].sum() +
                  ia4['Normalized iBAQ'].sum() +ia5['Normalized iBAQ'].sum() +ia6['Normalized iBAQ'].sum() +
                  ia7['Normalized iBAQ'].sum() +ia8['Normalized iBAQ'].sum() +ia9['Normalized iBAQ'].sum())


species = ("Salmonella Enteritis", "Acinetobacter baumannii")
pump_families= {
    'Periplasm': (se_periplasm_total, ab_periplasm_total),
    'Outer Membrane' : (se_outer_total, 0),
    'Inner Membrane' : (se_inner_total, ab_inner_total)
    }

x = np.arange(len(species))  # the label locations
width = 0.25  # the width of the bars
multiplier = 0

fig, ax = plt.subplots(layout='constrained')

for attribute, measurement in pump_families.items():
    offset = width * multiplier
    rects = ax.bar(x + offset, measurement, width, label=attribute)
    ax.bar_label(rects, padding=3)
    multiplier += 1

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Normalized iBAQ')
ax.set_title('Salmonella Enteritis vs Acinetobacter baumannii')
ax.set_xticks(x + width, species)
ax.legend(loc='upper right')
ax.set_ylim(0, 8)
plt.show()

#Comparing protein abudnances of LOCALIZATION in ABC FAMILY ONLY

#inner membrane sal
is1 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('macB').fillna(False)]
seitotal = is1['Normalized iBAQ'].sum() 

#inner membrane ab
ia1 = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('macB').fillna(False)]
abitotal = ia1['Normalized iBAQ'].sum()

#periplasm sal
s4 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('macA').fillna(False)]
septotal = s4['Normalized iBAQ'].sum()

#periplasm ab
a4 = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('macA').fillna(False)]
abptotal = a4['Normalized iBAQ'].sum()

#sal outer membrane
sal_tolC = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('tolC').fillna(False)]
seototal = sal_tolC['Normalized iBAQ'].sum()

species = ("Salmonella Enteritis", "Acinetobacter baumannii")
pump_families= {
    'Periplasm': (septotal, abptotal),
    'Outer Membrane' : (seototal, 0),
    'Inner Membrane' : (seitotal, abitotal)
    }

x = np.arange(len(species))  # the label locations
width = 0.25  # the width of the bars
multiplier = 0

fig, ax = plt.subplots(layout='constrained')

for attribute, measurement in pump_families.items():
    offset = width * multiplier
    rects = ax.bar(x + offset, measurement, width, label=attribute)
    ax.bar_label(rects, padding=3)
    multiplier += 1

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Normalized iBAQ')
ax.set_title('Salmonella Enteritis vs Acinetobacter baumannii Localization of ABC Family')
ax.set_xticks(x + width, species)
ax.legend(loc='upper right')
ax.set_ylim(0, 8)
plt.show()

#Comparing protein abudnances of LOCALIZATION in RND FAMILY ONLY

#inner membrane sal
is5 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('acrB').fillna(False)]
seitotalrnd = is5['Normalized iBAQ'].sum() 

#inner membrane ab
ia5 = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('acrB').fillna(False)]
abitotalrnd = ia5['Normalized iBAQ'].sum()

#periplasm sal
s1 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('acrA').fillna(False)]
septotalrnd = s1['Normalized iBAQ'].sum()

#periplasm ab
a2 = ab_new_df.loc[ab_new_df['Fasta headers'].str.contains('acrA').fillna(False)]
abptotalrnd = a2['Normalized iBAQ'].sum()

#sal outer membrane
sal_tolC = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('tolC').fillna(False)]
se_outer_total = sal_tolC['Normalized iBAQ'].sum()

species = ("Salmonella Enteritis", "Acinetobacter baumannii")
pump_families= {
    'Periplasm': (septotalrnd, abptotalrnd),
    'Outer Membrane' : (se_outer_total, 0),
    'Inner Membrane' : (seitotalrnd, abitotalrnd)
    }

x = np.arange(len(species))  # the label locations
width = 0.25  # the width of the bars
multiplier = 0

fig, ax = plt.subplots(layout='constrained')

for attribute, measurement in pump_families.items():
    offset = width * multiplier
    rects = ax.bar(x + offset, measurement, width, label=attribute)
    ax.bar_label(rects, padding=3)
    multiplier += 1

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Normalized iBAQ')
ax.set_title('Salmonella Enteritis vs Acinetobacter baumannii Localization of RND Family')
ax.set_xticks(x + width, species)
ax.legend(loc='upper right')
ax.set_ylim(0, 8)
plt.show()

"""The rest of the code are specific iBAQ values requested from my groupmates"""

sep1 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('acrA').fillna(False)]
sep2 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('macA').fillna(False)]
sep3 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('emrA').fillna(False)]
SE_peri_total = sep1['Normalized iBAQ'].sum() + sep2['Normalized iBAQ'].sum() + sep3['Normalized iBAQ'].sum() 
SE_peri_total

#For acrA periplasm salmonella
sep1['Normalized iBAQ'].sum()

#For macA periplasm salmonella
sep2['Normalized iBAQ'].sum()

#For emrA periplasm salmonella
sep3['Normalized iBAQ'].sum()

sal_tolC = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('tolC').fillna(False)]
se_outer_total = sal_tolC['Normalized iBAQ'].sum()
se_outer_total

sep4 = sal_new_df.loc[sal_new_df['Fasta headers'].str.contains('acrB').fillna(False)]
se_in_total = sep4['Normalized iBAQ'].sum()
se_in_total